{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, {}, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = window.matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, supportMatchMedia]);\n  return match;\n}\n\nexport default useMediaQuery;","map":{"version":3,"sources":["C:/Team3/CEOpage/client/node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js"],"names":["_extends","React","getThemeProps","useTheme","useMediaQuery","queryInput","options","arguments","length","undefined","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","_props$options","_props$options$defaul","defaultMatches","_props$options$noSsr","noSsr","_props$options$ssrMat","ssrMatchMedia","_React$useState","useState","matches","match","setMatch","useEffect","active","queryList","updateMatch","addListener","removeListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\n\nfunction useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, {}, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = window.matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, supportMatchMedia]);\n  return match;\n}\n\nexport default useMediaQuery;"]},"metadata":{},"sourceType":"module"}